#include "threads/thread.h"
#include <debug.h>
#include <stddef.h>
#include <random.h>
#include <stdio.h>
#include <string.h>
#include "threads/fixed_point.h"
#include "threads/flags.h"
#include "threads/interrupt.h"
#include "threads/intr-stubs.h"
#include "threads/palloc.h"
#include "threads/switch.h"
#include "threads/synch.h"
#include "threads/vaddr.h"


#ifdef USERPROG
#include "userprog/process.h"
#endif
// Added define about BSD scheduling.
#define NICE_DEFAULT 0
#define RECENT_CPU_DEFAULT 0
#define LOAD_AVG_DEFAULT 0
// LOAD_AVG mean number of thread which can excuted in recent 1 minute.
int load_avg;
/* Random value for struct thread's `magic' member.
   Used to detect stack overflow.  See the big comment at the top
   of thread.h for details. */
#define THREAD_MAGIC 0xcd6abf4b

/* List of processes in THREAD_READY state, that is, processes
   that are ready to run but not actually running. */
static struct list ready_list;

/* List of all processes.  Processes are added to this list
   when they are first scheduled and removed when they exit. */
static struct list all_list;

/* List of processes in THREAD_BLOCKED state, that is processes
   that are waiting I/O events */
static struct list sleep_list;

/* Idle thread. */
static struct thread *idle_thread;

/* Initial thread, the thread running init.c:main(). */
static struct thread *initial_thread;

/* Lock used by allocate_tid(). */
static struct lock tid_lock;

/* Stack frame for kernel_thread(). */
struct kernel_thread_frame 
  {
    void *eip;                  /* Return address. */
    thread_func *function;      /* Function to call. */
    void *aux;                  /* Auxiliary data for function. */
  };

/*The mimum value of local tick of the threads. */
static int64_t next_tick;
/* Statistics. */
static long long idle_ticks;    /* # of timer ticks spent idle. */
static long long kernel_ticks;  /* # of timer ticks in kernel threads. */
static long long user_ticks;    /* # of timer ticks in user programs. */

/* Scheduling. */
#define TIME_SLICE 4            /* # of timer ticks to give each thread. */
static unsigned thread_ticks;   /* # of timer ticks since last yield. */

/* If false (default), use round-robin scheduler.
   If true, use multi-level feedback queue scheduler.
   Controlled by kernel command-line option "-o mlfqs". */
bool thread_mlfqs;

static void kernel_thread (thread_func *, void *aux);

static void idle (void *aux UNUSED);
static struct thread *running_thread (void);
static struct thread *next_thread_to_run (void);
static void init_thread (struct thread *, const char *name, int priority);
static bool is_thread (struct thread *) UNUSED;
static void *alloc_frame (struct thread *, size_t size);
static void schedule (void);
void thread_schedule_tail (struct thread *prev);
static tid_t allocate_tid (void);

/* Initializes the threading system by transforming the code
   that's currently running into a thread.  This can't work in
   general and it is possible in this case only because loader.S
   was careful to put the bottom of the stack at a page boundary.

   Also initializes the run queue and the tid lock.

   After calling this function, be sure to initialize the page
   allocator before trying to create any threads with
   thread_create().

   It is not safe to call thread_current() until this function
   finishes. */
void
thread_init (void) 
{
  ASSERT (intr_get_level () == INTR_OFF);
  /*using list_init() to init all list that we will use*/
  lock_init (&tid_lock);
  list_init (&ready_list);
  list_init (&all_list);
  list_init (&sleep_list);

  /* Set up a thread structure for the running thread. */
  initial_thread = running_thread ();
  init_thread (initial_thread, "main", PRI_DEFAULT);
  initial_thread->status = THREAD_RUNNING;
  initial_thread->tid = allocate_tid ();
}

/* Starts preemptive thread scheduling by enabling interrupts.
   Also creates the idle thread. */
void
thread_start (void) 
{
  /* Create the idle thread. */
  struct semaphore idle_started;
  sema_init (&idle_started, 0);
  thread_create ("idle", PRI_MIN, idle, &idle_started);
  /* Set LOAD_AVG to default. */
  load_avg=LOAD_AVG_DEFAULT;

  /* Start preemptive thread scheduling. */
  intr_enable ();

  /* Wait for the idle thread to initialize idle_thread. */
  sema_down (&idle_started);
}

/* Called by the timer interrupt handler at each timer tick.
   Thus, this function runs in an external interrupt context. */
void
thread_tick (void) 
{
  struct thread *t = thread_current ();

  /* Update statistics. */
  if (t == idle_thread)
    idle_ticks++;
#ifdef USERPROG
  else if (t->pagedir != NULL)
    user_ticks++;
#endif
  else
    kernel_ticks++;

  /* Enforce preemption. */
  if (++thread_ticks >= TIME_SLICE)
    intr_yield_on_return ();
}

/* Prints thread statistics. */
void
thread_print_stats (void) 
{
  printf ("Thread: %lld idle ticks, %lld kernel ticks, %lld user ticks\n",
          idle_ticks, kernel_ticks, user_ticks);
}

/* Creates a new kernel thread named NAME with the given initial
   PRIORITY, which executes FUNCTION passing AUX as the argument,
   and adds it to the ready queue.  Returns the thread identifier
   for the new thread, or TID_ERROR if creation fails.

   If thread_start() has been called, then the new thread may be
   scheduled before thread_create() returns.  It could even exit
   before thread_create() returns.  Contrariwise, the original
   thread may run for any amount of time before the new thread is
   scheduled.  Use a semaphore or some other form of
   synchronization if you need to ensure ordering.

   The code provided sets the new thread's `priority' member to
   PRIORITY, but no actual priority scheduling is implemented.
   Priority scheduling is the goal of Problem 1-3. */
tid_t
thread_create (const char *name, int priority,
               thread_func *function, void *aux) 
{
  struct thread *t;
  struct kernel_thread_frame *kf;
  struct switch_entry_frame *ef;
  struct switch_threads_frame *sf;
  tid_t tid;
  enum intr_level old_level;

  ASSERT (function != NULL);

  /* Allocate thread. */
  t = palloc_get_page (PAL_ZERO);
  if (t == NULL)
    return TID_ERROR;

  /* Initialize thread. */
  init_thread (t, name, priority);
  tid = t->tid = allocate_tid ();

  /* Prepare thread for first run by initializing its stack.
     Do this atomically so intermediate values for the 'stack' 
     member cannot be observed. */
  old_level = intr_disable ();

  /* Stack frame for kernel_thread(). */
  kf = alloc_frame (t, sizeof *kf);
  kf->eip = NULL;
  kf->function = function;
  kf->aux = aux;

  /* Stack frame for switch_entry(). */
  ef = alloc_frame (t, sizeof *ef);
  ef->eip = (void (*) (void)) kernel_thread;

  /* Stack frame for switch_threads(). */
  sf = alloc_frame (t, sizeof *sf);
  sf->eip = switch_entry;
  sf->ebp = 0;

  intr_set_level (old_level);

  /* Add to run queue. */
  thread_unblock (t);

  /*The created thread priority is larger than current
    change current thread to created thread.*/
  test_max_priority();

  return tid;
}

/* Puts the current thread to sleep.  It will not be scheduled
   again until awoken by thread_unblock().

   This function must be called with interrupts turned off.  It
   is usually a better idea to use one of the synchronization
   primitives in synch.h. */
void
thread_block (void) 
{
  ASSERT (!intr_context ());
  ASSERT (intr_get_level () == INTR_OFF);

  thread_current ()->status = THREAD_BLOCKED;
  schedule ();
}

/* Transitions a blocked thread T to the ready-to-run state.
   This is an error if T is not blocked.  (Use thread_yield() to
   make the running thread ready.)

   This function does not preempt the running thread.  This can
   be important: if the caller had disabled interrupts itself,
   it may expect that it can atomically unblock a thread and
   update other data. */
void
thread_unblock (struct thread *t) 
{
  enum intr_level old_level;

  ASSERT (is_thread (t));

  old_level = intr_disable ();
  ASSERT (t->status == THREAD_BLOCKED);
  /*When thread go into ready list, make that descend order.*/
  list_insert_ordered (&ready_list, &t->elem, cmp_priority, 0);
  t->status = THREAD_READY;
  intr_set_level (old_level);
}

/* Returns the name of the running thread. */
const char *
thread_name (void) 
{
  return thread_current ()->name;
}

/* Returns the running thread.
   This is running_thread() plus a couple of sanity checks.
   See the big comment at the top of thread.h for details. */
struct thread *
thread_current (void) 
{
  struct thread *t = running_thread ();
  
  /* Make sure T is really a thread.
     If either of these assertions fire, then your thread may
     have overflowed its stack.  Each thread has less than 4 kB
     of stack, so a few big automatic arrays or moderate
     recursion can cause stack overflow. */
  ASSERT (is_thread (t));
  ASSERT (t->status == THREAD_RUNNING);

  return t;
}

/* Returns the running thread's tid. */
tid_t
thread_tid (void) 
{
  return thread_current ()->tid;
}

/* Deschedules the current thread and destroys it.  Never
   returns to the caller. */
void
thread_exit (void) 
{
  ASSERT (!intr_context ());

#ifdef USERPROG
  process_exit ();
#endif

  /* Remove thread from all threads list, set our status to dying,
     and schedule another process.  That process will destroy us
     when it calls thread_schedule_tail(). */
  intr_disable ();
  list_remove (&thread_current()->allelem);
  thread_current ()->status = THREAD_DYING;
  schedule ();
  NOT_REACHED ();
}

/* Yields the CPU.  The current thread is not put to sleep and
   may be scheduled again immediately at the scheduler's whim. */
void
thread_yield (void) 
{
  struct thread *cur = thread_current ();
  enum intr_level old_level;
  
  ASSERT (!intr_context ());
  /*Disable interrupt when thread_yield() are doing.*/
  old_level = intr_disable ();
  /*When put thread in ready list make it inserted to priority order.*/
  if (cur != idle_thread) 
    list_insert_ordered(&ready_list, &cur->elem, cmp_priority, 0);
  /*Chage current thread status to THREAD_READY*/
  cur->status = THREAD_READY;
  /*Do context switch.*/
  schedule ();
  /*Restore interrupt to OLD_LEVEL.*/
  intr_set_level (old_level);
}
/* If the current thread isn't idle, change the state
   of current to BLOCKED*/
void
thread_sleep(int64_t ticks)
{
  struct thread *cur = thread_current ();
  enum intr_level old_level;
  
  ASSERT (!intr_context ());
  /*When I handle thread list I need to disable any interrupt,
    so use intr_diable() to set disable interrupt and get
    current level. OLD_LEVEL save the information of current
    level for restoring to current level in later.*/
  old_level = intr_disable ();
  /*Set current thread LOCAL_TICK to TICKS. Current thread will
    wake up when time TICKS*/
  update_tick(cur->local_tick=ticks);
  /*Put current thread to SLEEP_LIST and set status THREAD_BLOCKED
    using thread_block().*/
  if (cur != idle_thread)
    list_push_back (&sleep_list, &cur->elem);
  thread_block();
  //Restore interrupt to before.
  intr_set_level (old_level);
}
/* When TICKS come in compare that with NEXT_TICK and put it.*/
void
update_tick(int64_t ticks)
{
  if(next_tick > ticks)
    next_tick=ticks;
}
/* Return NEXT_TICK when I want.*/
int64_t
get_next_tick(void)
{
  return next_tick;
}
/*When TICKS come in compare with threads which in sleep list.
  If there are threads which LOCAL_TICK is small than TICKs
  it means it time to wake up. So wake up that thread using
  thread_unblock()*/
void
thread_wakeup(int64_t ticks)
{
  next_tick = INT64_MAX;
  struct list_elem *e;
  e=list_begin(&sleep_list);
  /*Go through sleep list and check threads LOCAL_TICK.*/
  while(e != list_end(&sleep_list))
    {
      struct thread *t=list_entry(e,struct thread,elem);
      
      if(ticks >= t->local_tick)
        {
          /*Using list_remove(), remove that thread from sleep list.*/
          e = list_remove(&t->elem);
          /*Using thread_unblock() change status of thread to THREAD_READY
            and put in ready list.*/
          thread_unblock(t);
        }
      /*Keep go through and change NEXT_TICK using update_tick().*/
      else
        {
          e=list_next(e);
          update_tick(t->local_tick);
        }
    }  
}
/* Invoke function 'func' on all threads, passing along 'aux'.
   This function must be called with interrupts off. */
void
thread_foreach (thread_action_func *func, void *aux)
{
  struct list_elem *e;

  ASSERT (intr_get_level () == INTR_OFF);

  for (e = list_begin (&all_list); e != list_end (&all_list);
       e = list_next (e))
    {
      struct thread *t = list_entry (e, struct thread, allelem);
      func (t, aux);
    }
}

/* Sets the current thread's priority to NEW_PRIORITY. */
void
thread_set_priority (int new_priority) 
{
  /* The thread_set_priority() is not executed when mfqls mode. */
  if(thread_mlfqs ==false)
  {
    /* Save curent priority to consider scheduling. */
    int prev_priority = thread_current()->priority;
    /* Set PRIORITY and INIT_PRIORITY to NEW_PRIORITY. */
    thread_current ()->priority = new_priority;
    thread_current ()->init_priority = new_priority;
    /* Thread's priority is changed, so do priority donation
       using refresh_priority(). */
    refresh_priority();
    /* Compare PREV_PRIORITY and current priority, if current
       priority is smaller than previous one, it need to be
       schduling using test_max_priority(). */
    if(thread_current()->priority <= prev_priority)
      test_max_priority();
  }
}

/* Returns the current thread's priority. */
int
thread_get_priority (void) 
{
  return thread_current ()->priority;
}

/* Sets the current thread's nice value to NICE. */
void
thread_set_nice (int nice) 
{
  enum intr_level old_level;
  struct thread *cur = thread_current ();
  ASSERT (!intr_context ());
  /* Disable interrupt when doing thread_set_nice(). */
  old_level = intr_disable ();
  /* Set current thread's nice value to NICE. */
  thread_current()->nice = nice;
  /* Recompute prioirty because NICE is changed. */
  mlfqs_priority(thread_current());
  /* Re-scheduling it is part of thread_yield() */
  if (cur != idle_thread) 
    list_insert_ordered(&ready_list, &cur->elem, cmp_priority, 0);
  cur->status = THREAD_READY;
  schedule ();
  /* Restore interrupt level to OLD_LEVEL. */
  intr_set_level (old_level);
  
}

/* Returns the current thread's nice value. */
int
thread_get_nice (void) 
{
  enum intr_level old_level;
  int nice;
  ASSERT (!intr_context ());

  old_level = intr_disable ();
  nice=thread_current()->nice;

  intr_set_level (old_level);
  return nice;
}

/* Returns 100 times the system load average. */
int
thread_get_load_avg (void) 
{
  enum intr_level old_level;
  int load;
  ASSERT (!intr_context ());

  old_level = intr_disable ();
  /* The LOAD_AVG is fixed porint, so follow fixed point operations. */
  load = mult_mixed(load_avg,100);
  intr_set_level (old_level);
  return fp_to_int_round(load);
}

/* Returns 100 times the current thread's recent_cpu value. */
int
thread_get_recent_cpu (void) 
{
  enum intr_level old_level;
  int recent_cpu;
  ASSERT (!intr_context ());

  old_level = intr_disable ();
  /* The RECENT_CPU is fixed porint, so follow fixed point operations. */
  recent_cpu = mult_mixed(thread_current()->recent_cpu,100);
  intr_set_level (old_level);
  return fp_to_int_round(recent_cpu);

}

/* Idle thread.  Executes when no other thread is ready to run.

   The idle thread is initially put on the ready list by
   thread_start().  It will be scheduled once initially, at which
   point it initializes idle_thread, "up"s the semaphore passed
   to it to enable thread_start() to continue, and immediately
   blocks.  After that, the idle thread never appears in the
   ready list.  It is returned by next_thread_to_run() as a
   special case when the ready list is empty. */
static void
idle (void *idle_started_ UNUSED) 
{
  struct semaphore *idle_started = idle_started_;
  idle_thread = thread_current ();
  sema_up (idle_started);

  for (;;) 
    {
      /* Let someone else run. */
      intr_disable ();
      thread_block ();

      /* Re-enable interrupts and wait for the next one.

         The `sti' instruction disables interrupts until the
         completion of the next instruction, so these two
         instructions are executed atomically.  This atomicity is
         important; otherwise, an interrupt could be handled
         between re-enabling interrupts and waiting for the next
         one to occur, wasting as much as one clock tick worth of
         time.

         See [IA32-v2a] "HLT", [IA32-v2b] "STI", and [IA32-v3a]
         7.11.1 "HLT Instruction". */
      asm volatile ("sti; hlt" : : : "memory");
    }
}

/* Function used as the basis for a kernel thread. */
static void
kernel_thread (thread_func *function, void *aux) 
{
  ASSERT (function != NULL);

  intr_enable ();       /* The scheduler runs with interrupts off. */
  function (aux);       /* Execute the thread function. */
  thread_exit ();       /* If function() returns, kill the thread. */
}

/* Returns the running thread. */
struct thread *
running_thread (void) 
{
  uint32_t *esp;

  /* Copy the CPU's stack pointer into `esp', and then round that
     down to the start of a page.  Because `struct thread' is
     always at the beginning of a page and the stack pointer is
     somewhere in the middle, this locates the curent thread. */
  asm ("mov %%esp, %0" : "=g" (esp));
  return pg_round_down (esp);
}

/* Returns true if T appears to point to a valid thread. */
static bool
is_thread (struct thread *t)
{
  return t != NULL && t->magic == THREAD_MAGIC;
}

/* Does basic initialization of T as a blocked thread named
   NAME. */
static void
init_thread (struct thread *t, const char *name, int priority)
{
  ASSERT (t != NULL);
  ASSERT (PRI_MIN <= priority && priority <= PRI_MAX);
  ASSERT (name != NULL);

  memset (t, 0, sizeof *t);
  t->status = THREAD_BLOCKED;
  strlcpy (t->name, name, sizeof t->name);
  t->stack = (uint8_t *) t + PGSIZE;
  t->priority = priority;
  t->magic = THREAD_MAGIC;
  /* Init about donation variable INIT_PRIORITY,WAIT_ON_LOCK,
     DONATIONS,DONATION_ELEM */
  t->init_priority=priority;
  t->wait_on_lock=NULL;
  list_init(&(t->donations));
  t->donation_elem.prev=NULL;
  t->donation_elem.next=NULL;
  /* Init about BSD scheduler variable NICE, RECENT_CPU. */
  t->nice = NICE_DEFAULT;
  t->recent_cpu = RECENT_CPU_DEFAULT;
  list_push_back (&all_list, &t->allelem);
}

/* Allocates a SIZE-byte frame at the top of thread T's stack and
   returns a pointer to the frame's base. */
static void *
alloc_frame (struct thread *t, size_t size) 
{
  /* Stack data is always allocated in word-size units. */
  ASSERT (is_thread (t));
  ASSERT (size % sizeof (uint32_t) == 0);

  t->stack -= size;
  return t->stack;
}

/* Chooses and returns the next thread to be scheduled.  Should
   return a thread from the run queue, unless the run queue is
   empty.  (If the running thread can continue running, then it
   will be in the run queue.)  If the run queue is empty, return
   idle_thread. */
static struct thread *
next_thread_to_run (void) 
{
  if (list_empty (&ready_list))
    return idle_thread;
  else
    return list_entry (list_pop_front (&ready_list), struct thread, elem);
}

/* Completes a thread switch by activating the new thread's page
   tables, and, if the previous thread is dying, destroying it.

   At this function's invocation, we just switched from thread
   PREV, the new thread is already running, and interrupts are
   still disabled.  This function is normally invoked by
   thread_schedule() as its final action before returning, but
   the first time a thread is scheduled it is called by
   switch_entry() (see switch.S).

   It's not safe to call printf() until the thread switch is
   complete.  In practice that means that printf()s should be
   added at the end of the function.

   After this function and its caller returns, the thread switch
   is complete. */
void
thread_schedule_tail (struct thread *prev)
{
  struct thread *cur = running_thread ();
  
  ASSERT (intr_get_level () == INTR_OFF);

  /* Mark us as running. */
  cur->status = THREAD_RUNNING;

  /* Start new time slice. */
  thread_ticks = 0;

#ifdef USERPROG
  /* Activate the new address space. */
  process_activate ();
#endif

  /* If the thread we switched from is dying, destroy its struct
     thread.  This must happen late so that thread_exit() doesn't
     pull out the rug under itself.  (We don't free
     initial_thread because its memory was not obtained via
     palloc().) */
  if (prev != NULL && prev->status == THREAD_DYING && prev != initial_thread) 
    {
      ASSERT (prev != cur);
      palloc_free_page (prev);
    }
}

/* Schedules a new process.  At entry, interrupts must be off and
   the running process's state must have been changed from
   running to some other state.  This function finds another
   thread to run and switches to it.

   It's not safe to call printf() until thread_schedule_tail()
   has completed. */
static void
schedule (void) 
{
  struct thread *cur = running_thread ();
  struct thread *next = next_thread_to_run ();
  struct thread *prev = NULL;

  

  ASSERT (intr_get_level () == INTR_OFF);
  ASSERT (cur->status != THREAD_RUNNING);
  ASSERT (is_thread (next));

  if (cur != next)
    prev = switch_threads (cur, next);
  thread_schedule_tail (prev);
}

/* Returns a tid to use for a new thread. */
static tid_t
allocate_tid (void) 
{
  static tid_t next_tid = 1;
  tid_t tid;

  lock_acquire (&tid_lock);
  tid = next_tid++;
  lock_release (&tid_lock);

  return tid;
}

/* Offset of `stack' member within `struct thread'.
   Used by switch.S, which can't figure it out on its own. */
uint32_t thread_stack_ofs = offsetof (struct thread, stack);

/* In ready list compare with current thread priority and any thread
   in ready list, Using thread_get_priority() and first list element
   of ready list. And do scheduling using thread_yield().*/
void
test_max_priority(void)
{
  if(!list_empty(&ready_list) && thread_get_priority ()
     < list_entry(list_front(&ready_list), struct thread, elem)->priority)
    thread_yield();
}
/*Return TRUE when first arguments priority is larger and
  return FALSE other case. This function using when put thread in lists
  to priority order.*/
bool
cmp_priority(const struct list_elem* thread_a,
             const struct list_elem* thread_b,
             void* aux UNUSED)
{
  return (list_entry(thread_a, struct thread, elem)->priority
          > list_entry(thread_b, struct thread, elem)->priority);
}
/* Do priority donation considering nested donation. */
void
donate_priority(void)
{
  struct thread *thread_a;
  struct thread *thread_b;
  thread_a=thread_current();
  struct lock *lock=thread_a->wait_on_lock;
  thread_b=lock->holder;
  /* If some thread's WAIT_ON_LOCK is not NULL go to the lock holder
     and donate to that and go to that's lock holder. If we repeat this
     we can do nested donation. */
  while(thread_b!=NULL)
    {
      if (thread_a->priority > thread_b->priority)
        {
          thread_b->priority = thread_a->priority;
          if(thread_b->wait_on_lock==NULL)
            return;
          thread_b=thread_b->wait_on_lock->holder;
        }
      /* By donation the all front thread of lock holder's prioritys are
         same so we don't need to go next thread. */
      else
        return;
    }
}
void
remove_with_lock(struct lock *lock)
{
  
  struct list_elem *thread_a;
  struct list_elem *mid;
  struct thread *cp;
  struct list *donations = &(lock->holder->donations);
  /* When lock is released remove entry which wait for that lock
     from donations list. */
  for(thread_a=list_begin(donations);thread_a!=list_end(donations);
      thread_a=list_next(thread_a))
    {
      cp=list_entry(thread_a,struct thread,donation_elem);
      if (cp->wait_on_lock == lock)
        {
          mid = list_prev(thread_a);
          list_remove(&(cp->donation_elem));
          thread_a=mid;
        }
    }
}
/* When thread's priority is changed by other functions,
   donate priority to compare initial priority. */
void
refresh_priority(void)
{
  struct list_elem *thread_a;
  thread_a=list_begin(&(thread_current()->donations));
  /* First, set current thread's priority to INIT_PRIORITY
     which priority of before donation. */
  thread_current()->priority = thread_current()->init_priority;
  /* Change priority to compare with in donation list by considering
     nested donation. */
  while(thread_a!=NULL)
    {
      if (thread_current()->priority
          < list_entry(thread_a,struct thread,donation_elem)->priority)
        thread_current()->priority = list_entry(thread_a,struct thread,
                                                donation_elem)->priority;
      thread_a=thread_a->next;
    }
}
/* Caculate priority using RECENT_CPU and NICE. RECENT_CPU is 
   fixed point so follow fixed_point.h's operations. */
void
mlfqs_priority(struct thread *t)
{
  if(t!=idle_thread)
    {
      /* It is just priority's definition. 
         priority = PRI_MAX - recent_cpu/4 - nice*2. */
      t->priority= fp_to_int_round(sub_fp(sub_fp(int_to_fp(PRI_MAX),
                   div_mixed(t->recent_cpu,4)),mult_mixed(int_to_fp(t->nice),2)));
    }
}
/* Caculate priority using RECENT_CPU(itself) and NICE and LOAD_AVERAGE.
   Two variable is fixed point so follow fixed_point.h's operations. */
void
mlfqs_recent_cpu(struct thread *t)
{
  if(t!=idle_thread)
    {
      /* It is just recent_cpu's definition. 
         recent_cpu = ((2*load_average)/(2*load_average+1))*recent_cpu + nice. */
      t->recent_cpu = add_mixed(mult_fp(div_fp(mult_mixed(load_avg,2),
                      add_mixed(mult_mixed(load_avg,2),1)),t->recent_cpu),t->nice);
    }
}
/* Caculate priority using LOAD_AVERAGE and number of ready_list and
   threads which are excuting. The idle is excepted.
   LOAD_AVERAGE variable is fixed point so follow fixed_point.h's operations. */
void
mlfqs_load_avg(void)
{
  /* It is just load_average's definition. 
     load average = (59/60)*load average + (1/60)*ready_threads
     ready_threads mean not idle and (ready_list orthreads which are excuting.)
     The ready_threads caculated by count_thread(). */
  load_avg=add_fp(div_mixed(mult_mixed(load_avg,59),60),
                  div_mixed(int_to_fp(count_thread()),60));
  /* The LOAD_AVG can't be negative. When it occurs set LOAG_AVG to 0*/
  if (load_avg<0)
    load_avg=0;
}
/* Increase recent cpu at 1 by using fixed_point.h's opertions. */
void
mlfqs_increment(void)
{
  if(thread_current()!=idle_thread)
    thread_current()->recent_cpu=add_mixed(thread_current()->recent_cpu,1);
}
/* When mlfqs_recalc() is called recalculate all recent_cpu and priority. */
void
mlfqs_recalc(void)
{
  struct list_elem *thread_a;
  struct thread *cp;
  /* To change all thread's RECENT_CPU and PRIORITY, go through all_list
     and update RECENT_CPU and PRIORITY using mlfqs_recent_cpu()
     and mlfqs_priority(). */
  for(thread_a=list_begin(&all_list);
      thread_a!=list_end(&all_list);thread_a=list_next(thread_a))
    {
      cp=list_entry(thread_a,struct thread,allelem);
      mlfqs_recent_cpu(cp);
      mlfqs_priority(cp);
    }
}
/* Calculate the number of thread which are not idle
   and running thread or ready thread. */
int
count_thread(void)
{ 
  // CNT will save the number of we want.
  int cnt=0;
  struct thread *cp;
  struct list_elem *thread_a;
  for(thread_a=list_begin(&all_list);
      thread_a!=list_end(&all_list);thread_a=list_next(thread_a))
    {
      cp=list_entry(thread_a,struct thread,allelem);
      /* Check the thread is not idle and status is running or ready. */
      if (cp!=idle_thread && (cp->status==THREAD_RUNNING || cp->status==THREAD_READY))
        cnt ++;
    }
  return cnt;
}
